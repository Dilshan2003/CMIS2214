public class binaryNode {
    int data;
    binaryNode left;
    binaryNode right;
    
    public binaryNode(int data){
    
    this.data=data;
    left=right=null;
    
    }
    
    public int getData(){
    return data;
    }
    
}


public class binaryTree {
    public binaryNode root;
    
    public binaryTree(){
    root=null;
    
    }
    
    public boolean isEmpty(){
    
    return root==null;
    }
    
    
    // Non recursive
    
   public void insert(int data){
   binaryNode newNode= new binaryNode(data);
   
      if(root==null){
      root=newNode;
      }
      else{
      binaryNode current=root;
      binaryNode parent;
      
      while(true){
      parent=current;
      
      if(data<current.data){
      current=current.left;
         if(current==null){
         parent.left=newNode;
         return;
         }
      
      }
      
      else{
      
      current=current.right;
        if(current==null){
        parent.right=newNode;
         return;       
                         }
      
          }
       
      }}}
      
      //Insertion (Recursive)
    
    public void insertRecursive(int d){
       root=insertSubtree(root,d);
   
      }
    
    private binaryNode insertSubtree(binaryNode t,int d){
      if(t==null){
       t=new binaryNode(d);
      }
      else if(d<t.getData()){
       t.left= insertSubtree(t.left,d);
      }
      
      else if(d>t.getData()){
       t.right= insertSubtree(t.right,d);
      }
      return t;
      }
    
    
    public void preorder(binaryNode localroot){
      if(localroot!=null){
          System.out.print(localroot.data+" ");
          preorder(localroot.left);
        preorder(localroot.right);
      }
    
    
   
      
      
      
    }
    
    public void inOrder(binaryNode localroot){
       if(localroot!=null){
          
          inOrder(localroot.left);
          System.out.print(localroot.data+" ");
         inOrder(localroot.right);
      }
    
    
}
    
    public void postOrder(binaryNode localroot){
       if(localroot!=null){
          
          postOrder(localroot.left);
          
         postOrder(localroot.right);
         System.out.print(localroot.data+" ");
      }
    
       
}
    
   public void search(int x){
     binaryNode current=root;
     
     while(current!=null){
        if(x==current.data){
            System.out.println("Found: "+current.data);
            return;
        }
     
        else if(x<current.data){
        current =current.left;
        }
        else{
        current=current.right;
        }
        
     }
        System.out.println("Not Found "+x);
    
    } 
    
//delete
public binaryNode FindMin(binaryNode t){
    if(t==null)
        return null;
    else if(t.left==null)
        return t;
    else{
    return FindMin(t.left);
    }
    
    }
          
   public binaryNode DeleteSubTree(binaryNode t,int x){
     if(t==null)
         return null;
     if(x<t.data)
         t.left=DeleteSubTree(t.left,x);
     else if(x>t.data)
         t.right=DeleteSubTree(t.right,x);
     else{//Found to node delete
       if(t.left==null)
           return t.right;
       
       else if(t.right==null)
           return t.left;
       
       else{
           binaryNode successor=FindMin(t.right);
           t.data=successor.data;
           t.right=DeleteSubTree(t.right,successor.data);
           }
     }
         
   return t;
   
   } 


public void Delete(int x) {
      root=DeleteSubTree(root,x);
    }

 public int Height(binaryNode t){
   if(t==null)
       return -1;
   
   int leftHeight=Height(t.left);
   int rightHeight=Height(t.right);
   
   return Math.max(leftHeight,rightHeight)+1;
   
      }
   

    
    
}





public class Main {
    
    public static void main(String[] args) {
        binaryTree b=new binaryTree();
        
        b.insert(4);
        b.insert(2);
        b.insert(1);
        b.insert(3);
        b.insert(12);
        b.insert(6);
        b.insert(32);
        b.insert(22);
        b.insert(43);
        b.insert(54);
        
        System.out.println("Preorder");
        b.preorder(b.root);
        System.out.println("");
        
        System.out.println("Inorder");
        b.inOrder(b.root);
        System.out.println("");
        
        
        System.out.println("Postorder");
        b.postOrder(b.root);
        System.out.println("");

        b.search(22);
        b.search(23);

        b.Delete(12);
        b.inOrder(b.root);

        System.out.println("Height of the tree: "+b.Height(b.root));

    }
    
    
    
}
