public class Stack {
    
    int maxSize;
    int[] stackArr;
    int top;
    
    public Stack(int size){
    maxSize=size;
    stackArr=new int[maxSize];
    top=-1;
    
    }
    
    public boolean IsEmpty(){
    return (top== -1);
    }
    
    public boolean IsFull(){
        return (top==(maxSize-1));
    }
    
    public void push(int data){
    if(IsFull()){
        System.out.println("Stack overflow! cannot push");
        return;
    }
    
        System.out.println("Pushing "+ data);
        stackArr[++top]=data;
    
    }
    
    
    public int pop(){
    
      if(IsEmpty()){
        System.out.println("Stack Underflow! cannot pop");
        return -1;
       }
    
       System.out.println("Poping "+stackArr[top]);
       return stackArr[top--];
       //Return the top element then decrement top to remove it from the stack
    
    }
    
    public void print(){
    if(IsEmpty()){
        System.out.println("Empty stack");
    }
    
        System.out.println("Stack elements from top to bottom");
    int a=top;
    while(a!=-1){
        System.out.print("{"+stackArr[a]+"} ");
    a--;
    }
        System.out.println("");
    }
    
    
    
    
    public void peek(){
       if(IsEmpty()){
        System.out.println("Empty stack");
        } 
        System.out.println("Peek: "+stackArr[top]);
       
       
    }
    
}







public class Main {
    public static void main(String[] args) {
        
        Stack st1=new Stack(10);
        
        st1.push(2);
        st1.push(3);
        st1.push(4);
        st1.push(5);
        st1.push(6);
        
        st1.print();
        
        st1.pop();
        st1.print();
        
        st1.peek();
        
    }
}
